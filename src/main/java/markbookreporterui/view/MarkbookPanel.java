/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package markbookreporterui.view;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import markbookreporter.enums.AggregationMethod;
import markbookreporterui.Application;
import markbookreporterui.controller.MarkbookPanelController;
import markbookreporterui.model.MarkbookConfig;
import markbookreporterui.view.enums.ReportType;

/**
 *
 * @author School
 */
public class MarkbookPanel extends javax.swing.JPanel {

    protected MarkbookPanelController controller;
    /**
     * Creates new form MarkbookPanel
     * 
     * This panel will populate its control data by calling 
     * the set methods on its bound bean object, markbookPanelBean
     * using the supplied data from the model object
     */
    public MarkbookPanel(MarkbookConfig markbookConfig) {
        controller = new MarkbookPanelController();
        controller.registerView(this);
        initComponents();
        //populate the UI controls bean using the config model object
        markbookPanelBean.setAssessmentItemNames(markbookConfig.getAssessmentItemNamesFromMarkbook());
        markbookPanelBean.setStudentNames(markbookConfig.getStudentNamesFromMarkbook());
        markbookPanelBean.setCurriculumTitle(markbookConfig.getCurriculumTitle());
        markbookPanelBean.setMarkBookFilename(markbookConfig.getMarkBookFile().getName());
        markbookPanelBean.setMarkBookTitle(markbookConfig.getMarkBookTitle());
        //ASR Report Config Elements
        markbookPanelBean.setAsrSelectedAssessmentItemNames(markbookConfig.getAsrSelectedAssessmentItemNames());
        markbookPanelBean.setAsrSelectedAssessmentItemsOnly(markbookConfig.isAsrSelectedAssessmentItemsOnly());
        //CAR Report Config Elements
        markbookPanelBean.setCarFullProficiencyStrands(markbookConfig.isCarFullProficiencyStrands());
        markbookPanelBean.setCarPushUpChildCurriculumResults(markbookConfig.isCarPushUpChildCurriculumResults());
        markbookPanelBean.setCarUseFullCurriculumItems(markbookConfig.isCarUseFullCurriculumItems());
        //SAR Report Config Elements
        markbookPanelBean.setSarSelectedStudentsOnly(markbookConfig.isSarSelectedStudentsOnly());
        markbookPanelBean.setSarSelectedStudentNames(markbookConfig.getSarSelectedStudentNames());
        //SCR Report Config Elements
        markbookPanelBean.setScrAggregationMethod(markbookConfig.getScrAggregationMethod());
        markbookPanelBean.setScrFullProficiencyStrands(markbookConfig.isScrFullProficiencyStrands());
        markbookPanelBean.setScrPushUpChildCurriculumResults(markbookConfig.isScrPushUpChildCurriculumResults());
        markbookPanelBean.setScrUseFullCurriculumItems(markbookConfig.isScrUseFullCurriculumItems());
        markbookPanelBean.setScrAggregateNotAttempted(markbookConfig.isScrAggregateNotAttempted());
        markbookPanelBean.setScrSelectedStudentsOnly(markbookConfig.isScrSelectedStudentsOnly());
        markbookPanelBean.setScrSelectedStudentNames(markbookConfig.getScrSelectedStudentNames());
        markbookPanelBean.setScrSelectedAssessItems(markbookConfig.getScrSelectedAssessItems());
        markbookPanelBean.setScrSelectedAssessItemsOnly(markbookConfig.isScrSelectedAssessItemsOnly());
        //SPR Report Config elements
        markbookPanelBean.setSprSelectedStudentsOnly(markbookConfig.isSprSelectedStudentsOnly());
        markbookPanelBean.setSprSelectedStudentNames(markbookConfig.getSprSelectedStudentNames());        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        markbookPanelBean = new markbookreporterui.view.MarkbookPanelBean();
        fileCurriculumPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        markbookFilenameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        curriculumNameTextField = new javax.swing.JTextField();
        reportConfigsTabbedPane = new javax.swing.JTabbedPane();
        asrConfigPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        asrUseSelectedItemsCheckBox = new javax.swing.JCheckBox();
        asrSelecteditemsScrollPane = new javax.swing.JScrollPane();
        asrSelectedItemsList = new javax.swing.JList();
        jLabel9 = new javax.swing.JLabel();
        carConfigPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        carPushUpChildCurrResultsCheckBox = new javax.swing.JCheckBox();
        carShowAllCurrItemsCheckBox = new javax.swing.JCheckBox();
        carShowAllProfStrandsCheckBox = new javax.swing.JCheckBox();
        sarConfigPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        sarSelectedStudentsCheckBox = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        sarSelectedStudentsList = new javax.swing.JList();
        scrConfigPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        scrPushUpChildCurrResultsCheckBox = new javax.swing.JCheckBox();
        scrShowAllCurrItemsCheckBox = new javax.swing.JCheckBox();
        scrShowAllProfStrandsCheckBox = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        scrGradeAggregationComboBox = new javax.swing.JComboBox();
        scrSelectedStudentsCheckBox = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        scrSelectedStudentsList = new javax.swing.JList();
        scrSelectedAssessItemsCheckBox = new javax.swing.JCheckBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        scrSelectedAssessItemsList = new javax.swing.JList();
        jLabel13 = new javax.swing.JLabel();
        aggregateNotAttemptedCheckBox = new javax.swing.JCheckBox();
        sprConfigPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        sprSelectedStudentsCheckBox = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        sprSelectedStudentsList = new javax.swing.JList();
        refreshMarkbookDataButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Markbook File:");

        markbookFilenameTextField.setEditable(false);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${markBookFilename}"), markbookFilenameTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel2.setText("Curriculum:");

        curriculumNameTextField.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${curriculumTitle}"), curriculumNameTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        asrConfigPanel.setName("ASRConfig"); // NOI18N

        jLabel3.setText("This report gives an overview of assesment result percentages, group by assessment item.");

        asrUseSelectedItemsCheckBox.setText("Use only selected Assessment Items");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${asrSelectedAssessmentItemsOnly}"), asrUseSelectedItemsCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${assessmentItemNames}");
        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, markbookPanelBean, eLProperty, asrSelectedItemsList);
        bindingGroup.addBinding(jListBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${asrSelectedAssessmentItemNames}"), asrSelectedItemsList, org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${asrSelectedAssessmentItemsOnly}"), asrSelectedItemsList, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        asrSelecteditemsScrollPane.setViewportView(asrSelectedItemsList);

        jLabel9.setText("Assessment Items:");

        javax.swing.GroupLayout asrConfigPanelLayout = new javax.swing.GroupLayout(asrConfigPanel);
        asrConfigPanel.setLayout(asrConfigPanelLayout);
        asrConfigPanelLayout.setHorizontalGroup(
            asrConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(asrConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(asrConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(asrConfigPanelLayout.createSequentialGroup()
                        .addGroup(asrConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(asrSelecteditemsScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                            .addComponent(asrUseSelectedItemsCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(180, 180, 180))
                    .addComponent(jLabel9))
                .addGap(147, 147, 147))
        );
        asrConfigPanelLayout.setVerticalGroup(
            asrConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(asrConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(asrUseSelectedItemsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(asrSelecteditemsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addContainerGap())
        );

        reportConfigsTabbedPane.addTab("Assessment Results", asrConfigPanel);

        carConfigPanel.setName("CARConfig"); // NOI18N

        jLabel4.setText("This report gives an overview of what has been assessed in regard to the curriculum.");

        carPushUpChildCurrResultsCheckBox.setText("Push up child curriculum resuts");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${carPushUpChildCurriculumResults}"), carPushUpChildCurrResultsCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        carShowAllCurrItemsCheckBox.setText("Show *all* curriculum items");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${carUseFullCurriculumItems}"), carShowAllCurrItemsCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        carShowAllProfStrandsCheckBox.setText("Show *all* proficiency strands");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${carFullProficiencyStrands}"), carShowAllProfStrandsCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout carConfigPanelLayout = new javax.swing.GroupLayout(carConfigPanel);
        carConfigPanel.setLayout(carConfigPanelLayout);
        carConfigPanelLayout.setHorizontalGroup(
            carConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(carConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(carConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(carShowAllProfStrandsCheckBox)
                    .addComponent(carShowAllCurrItemsCheckBox)
                    .addComponent(carPushUpChildCurrResultsCheckBox)
                    .addComponent(jLabel4))
                .addContainerGap(242, Short.MAX_VALUE))
        );
        carConfigPanelLayout.setVerticalGroup(
            carConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(carConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(carPushUpChildCurrResultsCheckBox)
                .addGap(18, 18, 18)
                .addComponent(carShowAllCurrItemsCheckBox)
                .addGap(18, 18, 18)
                .addComponent(carShowAllProfStrandsCheckBox)
                .addContainerGap(282, Short.MAX_VALUE))
        );

        reportConfigsTabbedPane.addTab("Curriculum Assessment", carConfigPanel);

        sarConfigPanel.setName("SARConfig"); // NOI18N

        jLabel5.setText("This report gives an overview of student assessment percentages for each student.");

        jLabel11.setText("Students:");

        sarSelectedStudentsCheckBox.setText("Use only selected Students");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${sarSelectedStudentsOnly}"), sarSelectedStudentsCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${studentNames}");
        jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, eLProperty, sarSelectedStudentsList);
        bindingGroup.addBinding(jListBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${sarSelectedStudentNames}"), sarSelectedStudentsList, org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${sarSelectedStudentsOnly}"), sarSelectedStudentsList, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jScrollPane2.setViewportView(sarSelectedStudentsList);

        javax.swing.GroupLayout sarConfigPanelLayout = new javax.swing.GroupLayout(sarConfigPanel);
        sarConfigPanel.setLayout(sarConfigPanelLayout);
        sarConfigPanelLayout.setHorizontalGroup(
            sarConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sarConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sarConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sarConfigPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(sarConfigPanelLayout.createSequentialGroup()
                        .addGroup(sarConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sarSelectedStudentsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(sarConfigPanelLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE))
                        .addGap(327, 327, 327))))
        );
        sarConfigPanelLayout.setVerticalGroup(
            sarConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sarConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(sarSelectedStudentsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addContainerGap())
        );

        reportConfigsTabbedPane.addTab("Student Assessment", sarConfigPanel);

        scrConfigPanel.setName("SCRConfig"); // NOI18N

        jLabel6.setText("This report provides and overview of what each student has achieved in regards to the curriculum");

        scrPushUpChildCurrResultsCheckBox.setText("Push up child curriculum resuts");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${scrPushUpChildCurriculumResults}"), scrPushUpChildCurrResultsCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        scrShowAllCurrItemsCheckBox.setText("Show *all* curriculum items");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${scrUseFullCurriculumItems}"), scrShowAllCurrItemsCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        scrShowAllProfStrandsCheckBox.setText("Show *all* proficiency strands");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${scrFullProficiencyStrands}"), scrShowAllProfStrandsCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        jLabel8.setText("Grade Aggregation Method:");

        scrGradeAggregationComboBox.setModel(new DefaultComboBoxModel(AggregationMethod.values()));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${scrAggregationMethod}"), scrGradeAggregationComboBox, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        scrSelectedStudentsCheckBox.setText("Use only selected Students");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${scrSelectedStudentsOnly}"), scrSelectedStudentsCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        jLabel10.setText("Students:");

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${studentNames}");
        jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, eLProperty, scrSelectedStudentsList);
        bindingGroup.addBinding(jListBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${scrSelectedStudentNames}"), scrSelectedStudentsList, org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${scrSelectedStudentsOnly}"), scrSelectedStudentsList, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(scrSelectedStudentsList);

        scrSelectedAssessItemsCheckBox.setText("Use only selected Assessment Items");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${scrSelectedAssessItemsOnly}"), scrSelectedAssessItemsCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        scrSelectedAssessItemsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scrSelectedAssessItemsCheckBoxActionPerformed(evt);
            }
        });

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${assessmentItemNames}");
        jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, eLProperty, scrSelectedAssessItemsList);
        bindingGroup.addBinding(jListBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${scrSelectedAssessItems}"), scrSelectedAssessItemsList, org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${scrSelectedAssessItemsOnly}"), scrSelectedAssessItemsList, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jScrollPane4.setViewportView(scrSelectedAssessItemsList);

        jLabel13.setText("Assessment items:");

        aggregateNotAttemptedCheckBox.setText("Treat 'not attempted' as 0");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${scrAggregateNotAttempted}"), aggregateNotAttemptedCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout scrConfigPanelLayout = new javax.swing.GroupLayout(scrConfigPanel);
        scrConfigPanel.setLayout(scrConfigPanelLayout);
        scrConfigPanelLayout.setHorizontalGroup(
            scrConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scrConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scrConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(scrConfigPanelLayout.createSequentialGroup()
                        .addGroup(scrConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(scrConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(scrPushUpChildCurrResultsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(scrShowAllCurrItemsCheckBox)
                                .addComponent(scrShowAllProfStrandsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8)
                                .addComponent(scrGradeAggregationComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(aggregateNotAttemptedCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(scrConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel10)
                            .addComponent(scrSelectedStudentsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(scrConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addGroup(scrConfigPanelLayout.createSequentialGroup()
                                .addGroup(scrConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(scrSelectedAssessItemsCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(scrConfigPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(69, 69, 69))))
        );
        scrConfigPanelLayout.setVerticalGroup(
            scrConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scrConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGroup(scrConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(scrConfigPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(scrConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(scrPushUpChildCurrResultsCheckBox)
                            .addComponent(scrSelectedStudentsCheckBox)
                            .addComponent(scrSelectedAssessItemsCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(scrConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(scrConfigPanelLayout.createSequentialGroup()
                                .addComponent(scrShowAllCurrItemsCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(scrShowAllProfStrandsCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(scrGradeAggregationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(aggregateNotAttemptedCheckBox)
                                .addContainerGap())
                            .addGroup(scrConfigPanelLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(13, 13, 13)
                                .addComponent(jScrollPane4))))
                    .addGroup(scrConfigPanelLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE))))
        );

        reportConfigsTabbedPane.addTab("Student Curriculum", scrConfigPanel);

        sprConfigPanel.setName("SPRConfig"); // NOI18N

        jLabel7.setText("This report is intended as a feedback handout for each student.");

        sprSelectedStudentsCheckBox.setText("Use only selected Students");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${sprSelectedStudentsOnly}"), sprSelectedStudentsCheckBox, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        jLabel12.setText("Students:");

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${studentNames}");
        jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, eLProperty, sprSelectedStudentsList);
        bindingGroup.addBinding(jListBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${sprSelectedStudentNames}"), sprSelectedStudentsList, org.jdesktop.beansbinding.BeanProperty.create("selectedElements"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, markbookPanelBean, org.jdesktop.beansbinding.ELProperty.create("${sprSelectedStudentsOnly}"), sprSelectedStudentsList, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jScrollPane3.setViewportView(sprSelectedStudentsList);

        javax.swing.GroupLayout sprConfigPanelLayout = new javax.swing.GroupLayout(sprConfigPanel);
        sprConfigPanel.setLayout(sprConfigPanelLayout);
        sprConfigPanelLayout.setHorizontalGroup(
            sprConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sprConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sprConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sprConfigPanelLayout.createSequentialGroup()
                        .addGroup(sprConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(sprSelectedStudentsCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(sprConfigPanelLayout.createSequentialGroup()
                        .addGroup(sprConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE))
                        .addGap(327, 327, 327))))
        );
        sprConfigPanelLayout.setVerticalGroup(
            sprConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sprConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(sprSelectedStudentsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel12)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addContainerGap())
        );

        reportConfigsTabbedPane.addTab("Student Progress", sprConfigPanel);

        refreshMarkbookDataButton.setText("Reload");
        refreshMarkbookDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshMarkbookDataButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fileCurriculumPanelLayout = new javax.swing.GroupLayout(fileCurriculumPanel);
        fileCurriculumPanel.setLayout(fileCurriculumPanelLayout);
        fileCurriculumPanelLayout.setHorizontalGroup(
            fileCurriculumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileCurriculumPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(markbookFilenameTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(refreshMarkbookDataButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(curriculumNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(reportConfigsTabbedPane)
        );
        fileCurriculumPanelLayout.setVerticalGroup(
            fileCurriculumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileCurriculumPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileCurriculumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(markbookFilenameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(curriculumNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshMarkbookDataButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reportConfigsTabbedPane))
        );

        add(fileCurriculumPanel, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshMarkbookDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshMarkbookDataButtonActionPerformed
        controller.refreshMarkbookData(markbookPanelBean.getMarkBookTitle());
        JOptionPane.showMessageDialog(this, "Re-loaded " + markbookPanelBean.getMarkBookFilename(), "Reloaded Markbook Data", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_refreshMarkbookDataButtonActionPerformed

    private void scrSelectedAssessItemsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scrSelectedAssessItemsCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_scrSelectedAssessItemsCheckBoxActionPerformed


    public MarkbookPanelBean getBean(){
        return markbookPanelBean;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox aggregateNotAttemptedCheckBox;
    private javax.swing.JPanel asrConfigPanel;
    private javax.swing.JList asrSelectedItemsList;
    private javax.swing.JScrollPane asrSelecteditemsScrollPane;
    private javax.swing.JCheckBox asrUseSelectedItemsCheckBox;
    private javax.swing.JPanel carConfigPanel;
    private javax.swing.JCheckBox carPushUpChildCurrResultsCheckBox;
    private javax.swing.JCheckBox carShowAllCurrItemsCheckBox;
    private javax.swing.JCheckBox carShowAllProfStrandsCheckBox;
    private javax.swing.JTextField curriculumNameTextField;
    private javax.swing.JPanel fileCurriculumPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField markbookFilenameTextField;
    private markbookreporterui.view.MarkbookPanelBean markbookPanelBean;
    private javax.swing.JButton refreshMarkbookDataButton;
    private javax.swing.JTabbedPane reportConfigsTabbedPane;
    private javax.swing.JPanel sarConfigPanel;
    private javax.swing.JCheckBox sarSelectedStudentsCheckBox;
    private javax.swing.JList sarSelectedStudentsList;
    private javax.swing.JPanel scrConfigPanel;
    private javax.swing.JComboBox scrGradeAggregationComboBox;
    private javax.swing.JCheckBox scrPushUpChildCurrResultsCheckBox;
    private javax.swing.JCheckBox scrSelectedAssessItemsCheckBox;
    private javax.swing.JList scrSelectedAssessItemsList;
    private javax.swing.JCheckBox scrSelectedStudentsCheckBox;
    private javax.swing.JList scrSelectedStudentsList;
    private javax.swing.JCheckBox scrShowAllCurrItemsCheckBox;
    private javax.swing.JCheckBox scrShowAllProfStrandsCheckBox;
    private javax.swing.JPanel sprConfigPanel;
    private javax.swing.JCheckBox sprSelectedStudentsCheckBox;
    private javax.swing.JList sprSelectedStudentsList;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public ReportType getSelectedReportType() {
        switch(reportConfigsTabbedPane.getSelectedComponent().getName()){
            case "ASRConfig": return ReportType.ASR;
            case "CARConfig": return ReportType.CAR;
            case "SCRConfig": return ReportType.SCR;
            case "SARConfig": return ReportType.SAR;
            case "SPRConfig": return ReportType.SPR;
        }
        return null;
    }
}
