/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package markbookreporterui.view;

import java.awt.Component;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import markbookreporterui.Application;
import markbookreporterui.controller.ApplicationFrameController;
import markbookreporterui.model.MarkbookConfig;
import markbookreporterui.utils.DialogResult;
import markbookreporterui.view.enums.ReportType;

/**
 *
 * @author School
 */
public class ApplicationFrame extends javax.swing.JFrame {

    protected ApplicationFrameController controller;

    /**
     * Creates new form ApplicationFrame
     */
    public ApplicationFrame() {
        controller = new ApplicationFrameController();
        controller.registerView(this);
        initComponents();
        //Set initial bean properties
        applicationFrameBean.setSaveFileIsBound(false);
        applicationFrameBean.setTitle(Application.getInstance().getMarkbookSet().getTitle());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        applicationFrameBean = new markbookreporterui.view.ApplicationFrameBean();
        topContentSplitPane = new javax.swing.JSplitPane();
        markBooksTabbedPane = new javax.swing.JTabbedPane();
        reportOutputPanel = new javax.swing.JPanel();
        reportOutputControlsPanel = new javax.swing.JPanel();
        refreshReportButton = new javax.swing.JButton();
        sendToBrowserButton = new javax.swing.JButton();
        previewScrollPane = new javax.swing.JScrollPane();
        previewEditorPane = new javax.swing.JEditorPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newConfigSetMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        addMarkBookMenuItem = new javax.swing.JMenuItem();
        removeCurrentMarkbookMenuItem = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        viewLogMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1024, 768));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, applicationFrameBean, org.jdesktop.beansbinding.ELProperty.create("${title}"), this, org.jdesktop.beansbinding.BeanProperty.create("title"));
        bindingGroup.addBinding(binding);

        topContentSplitPane.setDividerLocation(670);
        topContentSplitPane.setLeftComponent(markBooksTabbedPane);

        reportOutputPanel.setLayout(new java.awt.BorderLayout());

        reportOutputControlsPanel.setLayout(new java.awt.GridLayout(1, 0));

        refreshReportButton.setText("Refresh");
        refreshReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshReportButtonActionPerformed(evt);
            }
        });
        reportOutputControlsPanel.add(refreshReportButton);

        sendToBrowserButton.setText("Send to Web Browser");
        sendToBrowserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendToBrowserButtonActionPerformed(evt);
            }
        });
        reportOutputControlsPanel.add(sendToBrowserButton);

        reportOutputPanel.add(reportOutputControlsPanel, java.awt.BorderLayout.SOUTH);

        previewEditorPane.setEditable(false);
        previewEditorPane.setContentType("text/html"); // NOI18N
        previewEditorPane.setEditorKit(new javax.swing.text.html.HTMLEditorKit());

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, applicationFrameBean, org.jdesktop.beansbinding.ELProperty.create("${reportHtml}"), previewEditorPane, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        previewScrollPane.setViewportView(previewEditorPane);

        reportOutputPanel.add(previewScrollPane, java.awt.BorderLayout.CENTER);

        topContentSplitPane.setRightComponent(reportOutputPanel);

        getContentPane().add(topContentSplitPane, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        newConfigSetMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newConfigSetMenuItem.setText("New...");
        newConfigSetMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newConfigSetMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newConfigSetMenuItem);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open...");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);
        fileMenu.add(jSeparator1);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText("Save");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, applicationFrameBean, org.jdesktop.beansbinding.ELProperty.create("${saveFileIsBound}"), saveMenuItem, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setText("Save as...");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);
        fileMenu.add(jSeparator2);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        addMarkBookMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        addMarkBookMenuItem.setText("Add Markbook");
        addMarkBookMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMarkBookMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(addMarkBookMenuItem);

        removeCurrentMarkbookMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        removeCurrentMarkbookMenuItem.setText("Remove selected markbook");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, applicationFrameBean, org.jdesktop.beansbinding.ELProperty.create("${markbookPanelBeans.size > 0}"), removeCurrentMarkbookMenuItem, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        removeCurrentMarkbookMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCurrentMarkbookMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(removeCurrentMarkbookMenuItem);

        menuBar.add(editMenu);

        toolsMenu.setText("Tools");

        viewLogMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        viewLogMenuItem.setText("View System Log");
        viewLogMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewLogMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(viewLogMenuItem);

        menuBar.add(toolsMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshReportButtonActionPerformed
        // Find the selected markbook title and get the controller to create a new report
        MarkbookPanel selectedPanel = getSelectedMarkbookPanel();
        if(selectedPanel == null) return;
        //find out which report tab is currently selected
        ReportType reportType = selectedPanel.getSelectedReportType();
        getController().refreshReport(getSelectedMarkbookPanel().getBean().getMarkBookTitle(), reportType);
        
    }//GEN-LAST:event_refreshReportButtonActionPerformed

    private void addMarkBookMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMarkBookMenuItemActionPerformed
        NewMarkbookDialog d = new NewMarkbookDialog(this, true);
        d.setLocationRelativeTo(null);
        d.setVisible(true);

        DialogResult<NewMarkbookDialogBean> dialogResult = d.getDialogResult();

        if (dialogResult.getResultType() == DialogResult.ResultType.CANCEL) {
            return;
        }

        getController().addNewMarkbook(dialogResult.getElement());
    }//GEN-LAST:event_addMarkBookMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        if (getController().save()) {
            JOptionPane.showMessageDialog(this, Application.getInstance().getMarkbookSet().getTitle() + " saved", "Config Set Saved", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Error saving " + Application.getInstance().getMarkbookSet().getTitle() + ", see log", "Save Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Markbook Reporter File", "mbc");
        chooser.setFileFilter(filter);
        if (Application.getInstance().getMarkbookSet().getLoadedFrom() != null) {
            chooser.setCurrentDirectory(Application.getInstance().getMarkbookSet().getLoadedFrom().getParentFile());
        }
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            if (getController().saveAs(chooser.getSelectedFile())) {
                JOptionPane.showMessageDialog(this, Application.getInstance().getMarkbookSet().getTitle() + " saved", "Config Set Saved", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Error saving " + Application.getInstance().getMarkbookSet().getTitle() + ", see log", "Save Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        getController().exit();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void removeCurrentMarkbookMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCurrentMarkbookMenuItemActionPerformed
        MarkbookPanel selectedPanel = getSelectedMarkbookPanel();
        //First, get the controller to take the markbook out of the model
        if(selectedPanel == null) return;
        
        MarkbookPanelBean bean = selectedPanel.getBean();
        getController().removeMarkbook(bean.getMarkBookTitle());
        //now remove the panel component from the tabbed pane
        markBooksTabbedPane.remove(selectedPanel);
        //and get the panel bean out of this beans collection
        applicationFrameBean.removeMarkbookPanelBean(bean);

    }//GEN-LAST:event_removeCurrentMarkbookMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Markbook Reporter File", "mbc");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            getController().loadMarkbookConfigSetFromFile(chooser.getSelectedFile());
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void newConfigSetMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newConfigSetMenuItemActionPerformed
        getController().createAndLoadNewConfigSet();
    }//GEN-LAST:event_newConfigSetMenuItemActionPerformed

    private void sendToBrowserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendToBrowserButtonActionPerformed
        getController().sendReportToBrowser();
    }//GEN-LAST:event_sendToBrowserButtonActionPerformed

    private void viewLogMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewLogMenuItemActionPerformed
        ViewApplicationLogDialog d = new ViewApplicationLogDialog(this, false);
        d.setLocationRelativeTo(null);
        d.setVisible(true);
    }//GEN-LAST:event_viewLogMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        AboutDialog d = new AboutDialog(this, true);
        d.setLocationRelativeTo(null);
        d.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    public ApplicationFrameBean getBean() {
        return applicationFrameBean;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem addMarkBookMenuItem;
    private markbookreporterui.view.ApplicationFrameBean applicationFrameBean;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTabbedPane markBooksTabbedPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newConfigSetMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JEditorPane previewEditorPane;
    private javax.swing.JScrollPane previewScrollPane;
    private javax.swing.JButton refreshReportButton;
    private javax.swing.JMenuItem removeCurrentMarkbookMenuItem;
    private javax.swing.JPanel reportOutputControlsPanel;
    private javax.swing.JPanel reportOutputPanel;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton sendToBrowserButton;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.JSplitPane topContentSplitPane;
    private javax.swing.JMenuItem viewLogMenuItem;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public void addMarkbookPanel(MarkbookConfig markbookConfig) {
        //Create a new JPanel - MarkbookPanel and add it to the tabbed pane
        //(the constructor populates its data beand from the given config)
        MarkbookPanel panel = new MarkbookPanel(markbookConfig);
        markBooksTabbedPane.add(markbookConfig.getMarkBookTitle(), panel);
        //Add the panel bean to this beans collection
        applicationFrameBean.addMarkbookPanelBean(panel.getBean());
    }

    public void clearMarkbookPanels() {
        markBooksTabbedPane.removeAll();
        //remove all panel beans
        applicationFrameBean.removeAllMarkbookPanelBeans();
    }

    public MarkbookPanelBean getBeanForMarkbookPanelWithTitle(String title) {
        //Find the selecteed panel
        for (Component c : markBooksTabbedPane.getComponents()) {
            MarkbookPanel markbookPanel = (MarkbookPanel) c;
            if (markbookPanel.getBean().getMarkBookTitle().equals(title)) {
                return markbookPanel.getBean();
            }
        }
        return null;
    }
    
    private MarkbookPanel getSelectedMarkbookPanel(){
        MarkbookPanel selectedPanel = null;
        //Find the selecteed panel
        for (Component c : markBooksTabbedPane.getComponents()) {
            if (c == markBooksTabbedPane.getSelectedComponent()) {
                selectedPanel = (MarkbookPanel) c;
            }
        }
        return selectedPanel;
    }

    /**
     * @return the controller
     */
    public ApplicationFrameController getController() {
        return controller;
    }

    /**
     * @param controller the controller to set
     */
    public void setController(ApplicationFrameController controller) {
        this.controller = controller;
    }

}
